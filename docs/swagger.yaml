basePath: /api/v1
definitions:
  model.CreateUserReq:
    properties:
      birth_date:
        type: string
      confirm_password:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - birth_date
    - confirm_password
    - email
    - full_name
    - password
    type: object
  model.LoginUserReq:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        $ref: '#/definitions/response.Status'
    type: object
  response.Status:
    properties:
      code:
        type: integer
      is_success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: Serenify documentation API
  title: Serenify API
  version: "1.0"
paths:
  /auth/current-user:
    get:
      consumes:
      - application/json
      description: Get current user with user id from context
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get current user
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with login user request
      parameters:
      - description: Login User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with create user request
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - Auth
  /auth/upload-photo:
    post:
      consumes:
      - multipart/form-data
      description: Upload photo with user id from context and form file
      parameters:
      - description: Photo
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Upload photo
      tags:
      - Auth
  /auth/verify-email/{verificationCode}:
    get:
      consumes:
      - application/json
      description: Verify email with verification code
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify email
      tags:
      - Auth
swagger: "2.0"
